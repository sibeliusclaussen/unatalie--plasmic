// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jodssu5PmGaRR5vFRfdqKh
// Component: cqzLl1ryde

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_0Uf6PR80TuUp8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0UF6pR80tuUP8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_nu_website.module.css"; // plasmic-import: jodssu5PmGaRR5vFRfdqKh/projectcss
import sty from "./PlasmicArticlesClipping.module.css"; // plasmic-import: cqzLl1ryde/css

export type PlasmicArticlesClipping__VariantMembers = {};
export type PlasmicArticlesClipping__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticlesClipping__VariantsArgs;
export const PlasmicArticlesClipping__VariantProps =
  new Array<VariantPropType>();

export type PlasmicArticlesClipping__ArgsType = {
  coverImage?: React.ReactNode;
  category?: React.ReactNode;
  title?: React.ReactNode;
  excerpt?: React.ReactNode;
  sourceName?: React.ReactNode;
  sourceWebsite?: React.ReactNode;
  sourceData?: React.ReactNode;
};
type ArgPropType = keyof PlasmicArticlesClipping__ArgsType;
export const PlasmicArticlesClipping__ArgProps = new Array<ArgPropType>(
  "coverImage",
  "category",
  "title",
  "excerpt",
  "sourceName",
  "sourceWebsite",
  "sourceData"
);

export type PlasmicArticlesClipping__OverridesType = {
  root?: p.Flex<"div">;
  coverCategory?: p.Flex<"div">;
  cover?: p.Flex<"div">;
  coverOverlay?: p.Flex<"div">;
  category?: p.Flex<"div">;
  articleInfo?: p.Flex<"div">;
  titleExcerpt?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  p?: p.Flex<"p">;
  publisher?: p.Flex<"div">;
};

export interface DefaultArticlesClippingProps {
  coverImage?: React.ReactNode;
  category?: React.ReactNode;
  title?: React.ReactNode;
  excerpt?: React.ReactNode;
  sourceName?: React.ReactNode;
  sourceWebsite?: React.ReactNode;
  sourceData?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticlesClipping__RenderFunc(props: {
  variants: PlasmicArticlesClipping__VariantsArgs;
  args: PlasmicArticlesClipping__ArgsType;
  overrides: PlasmicArticlesClipping__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0Uf6PR80TuUp8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"coverCategory"}
          data-plasmic-override={overrides.coverCategory}
          className={classNames(projectcss.all, sty.coverCategory)}
        >
          {true ? (
            <div
              data-plasmic-name={"cover"}
              data-plasmic-override={overrides.cover}
              className={classNames(projectcss.all, sty.cover)}
            >
              {true ? (
                <div
                  data-plasmic-name={"coverOverlay"}
                  data-plasmic-override={overrides.coverOverlay}
                  className={classNames(projectcss.all, sty.coverOverlay)}
                />
              ) : null}
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__fzXCe)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/nu_website/images/screenShot20220813At41153PMpng.png",
                      fullWidth: 1462,
                      fullHeight: 1376,
                      aspectRatio: undefined
                    }}
                  />
                ),

                value: args.coverImage
              })}
            </div>
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"category"}
              data-plasmic-override={overrides.category}
              className={classNames(projectcss.all, sty.category)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Gender Policy",
                value: args.category,
                className: classNames(sty.slotTargetCategory)
              })}
            </div>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"articleInfo"}
          data-plasmic-override={overrides.articleInfo}
          hasGap={true}
          className={classNames(projectcss.all, sty.articleInfo)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"titleExcerpt"}
              data-plasmic-override={overrides.titleExcerpt}
              hasGap={true}
              className={classNames(projectcss.all, sty.titleExcerpt)}
            >
              <h4
                data-plasmic-name={"h4"}
                data-plasmic-override={overrides.h4}
                className={classNames(projectcss.all, projectcss.h4, sty.h4)}
              >
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Brazilian women are among the most influential in the world in gender policies",
                  value: args.title,
                  className: classNames(sty.slotTargetTitle)
                })}
              </h4>
              <p
                data-plasmic-name={"p"}
                data-plasmic-override={overrides.p}
                className={classNames(projectcss.all, projectcss.p, sty.p)}
              >
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Quatro brasileiras estão entre as 100 personalidades mais influentes do mundo em políticas de gênero na lista que a fundação britânica Apolitical divulgou na quinta-feira (25). A lista é uma referência na área e, entre os nomes, já figuraram a ex-primeira-dama americana Michelle Obama e a ex-presidente do Chile Michelle Bachelet.",
                  value: args.excerpt,
                  className: classNames(sty.slotTargetExcerpt)
                })}
              </p>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"publisher"}
              data-plasmic-override={overrides.publisher}
              hasGap={true}
              className={classNames(projectcss.all, sty.publisher)}
            >
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  sty.h6__xGDpm
                )}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Universa",
                  value: args.sourceName,
                  className: classNames(sty.slotTargetSourceName)
                })}
              </h6>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              ) ? (
                <h6
                  className={classNames(
                    projectcss.all,
                    projectcss.h6,
                    projectcss.__wab_text,
                    sty.h6__jiDTo
                  )}
                >
                  {","}
                </h6>
              ) : null}
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  sty.h6___4L8Iu
                )}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "27/03/2021 04h00",
                  value: args.sourceData,
                  className: classNames(sty.slotTargetSourceData)
                })}
              </h6>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              ) ? (
                <h6
                  className={classNames(
                    projectcss.all,
                    projectcss.h6,
                    projectcss.__wab_text,
                    sty.h6__mxHxh
                  )}
                >
                  {"on"}
                </h6>
              ) : null}
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  sty.h6__kGjYv
                )}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "UOL Website",
                  value: args.sourceWebsite,
                  className: classNames(sty.slotTargetSourceWebsite)
                })}
              </h6>
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "coverCategory",
    "cover",
    "coverOverlay",
    "category",
    "articleInfo",
    "titleExcerpt",
    "h4",
    "p",
    "publisher"
  ],
  coverCategory: ["coverCategory", "cover", "coverOverlay", "category"],
  cover: ["cover", "coverOverlay"],
  coverOverlay: ["coverOverlay"],
  category: ["category"],
  articleInfo: ["articleInfo", "titleExcerpt", "h4", "p", "publisher"],
  titleExcerpt: ["titleExcerpt", "h4", "p"],
  h4: ["h4"],
  p: ["p"],
  publisher: ["publisher"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  coverCategory: "div";
  cover: "div";
  coverOverlay: "div";
  category: "div";
  articleInfo: "div";
  titleExcerpt: "div";
  h4: "h4";
  p: "p";
  publisher: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticlesClipping__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticlesClipping__VariantsArgs;
    args?: PlasmicArticlesClipping__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticlesClipping__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticlesClipping__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArticlesClipping__ArgProps,
          internalVariantPropNames: PlasmicArticlesClipping__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArticlesClipping__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticlesClipping";
  } else {
    func.displayName = `PlasmicArticlesClipping.${nodeName}`;
  }
  return func;
}

export const PlasmicArticlesClipping = Object.assign(
  // Top-level PlasmicArticlesClipping renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    coverCategory: makeNodeComponent("coverCategory"),
    cover: makeNodeComponent("cover"),
    coverOverlay: makeNodeComponent("coverOverlay"),
    category: makeNodeComponent("category"),
    articleInfo: makeNodeComponent("articleInfo"),
    titleExcerpt: makeNodeComponent("titleExcerpt"),
    h4: makeNodeComponent("h4"),
    p: makeNodeComponent("p"),
    publisher: makeNodeComponent("publisher"),

    // Metadata about props expected for PlasmicArticlesClipping
    internalVariantProps: PlasmicArticlesClipping__VariantProps,
    internalArgProps: PlasmicArticlesClipping__ArgProps
  }
);

export default PlasmicArticlesClipping;
/* prettier-ignore-end */
