// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jodssu5PmGaRR5vFRfdqKh
// Component: -8_5fZlfPp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderHeroPage from "../../HeaderHeroPage"; // plasmic-import: nF2ySVLpMIh/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: jGsW_a0TMYi/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import InitiativesCard from "../../InitiativesCard"; // plasmic-import: RpwP78mekAf/component
import Footer from "../../Footer"; // plasmic-import: oAWDpYdN0s/component

import { useScreenVariants as useScreenVariants_0Uf6PR80TuUp8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0UF6pR80tuUP8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_nu_website.module.css"; // plasmic-import: jodssu5PmGaRR5vFRfdqKh/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: -8_5fZlfPp/css

import NatalieUnterstellLogoIcon from "./icons/PlasmicIcon__NatalieUnterstellLogo"; // plasmic-import: A4jG8WrNiS0Xj/icon
import _Icon from "./icons/PlasmicIcon___"; // plasmic-import: 6Vrd0S0dtKQ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: iemRUT8B78Y/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: tfqLjeUE7Y3/icon

export type PlasmicAbout__VariantMembers = {};
export type PlasmicAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout__VariantsArgs;
export const PlasmicAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAbout__ArgsType;
export const PlasmicAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout__OverridesType = {
  root?: p.Flex<"div">;
  headerHeroPage?: p.Flex<typeof HeaderHeroPage>;
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8?: p.Flex<"p">;
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5?: p.Flex<"h2">;
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6?: p.Flex<"h2">;
  title?: p.Flex<"h3">;
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7?: p.Flex<"p">;
  h4?: p.Flex<"h4">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultAboutProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbout__RenderFunc(props: {
  variants: PlasmicAbout__VariantsArgs;
  args: PlasmicAbout__ArgsType;
  overrides: PlasmicAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0Uf6PR80TuUp8()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAbout.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAbout.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAbout.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <HeaderHeroPage
            data-plasmic-name={"headerHeroPage"}
            data-plasmic-override={overrides.headerHeroPage}
            className={classNames("__wab_instance", sty.headerHeroPage)}
            coverPage={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ag5Y6)}
                displayHeight={"100%" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/nu_website/images/fotoHalftone04Jpg.jpg",
                  fullWidth: 2560,
                  fullHeight: 1641,
                  aspectRatio: undefined
                }}
              />
            }
            slot={
              <NavigationBar
                brand={
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__qArUm
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <NatalieUnterstellLogoIcon
                      className={classNames(projectcss.all, sty.svg__dEfQy)}
                      role={"img"}
                    />
                  </p.PlasmicLink>
                }
                className={classNames(
                  "__wab_instance",
                  sty.navigationBar__sUy4R
                )}
                closeButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__qhwzw)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/close.svg" as const}
                  />
                }
                forceOpenMenu={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? false
                    : true
                }
                itemsGap={32 as const}
                menuItems={
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sBx7T)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__jp5Jx
                      )}
                      component={Link}
                      href={`/`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__nPd2I
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        {"Home"}
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__cdbbO
                      )}
                      component={Link}
                      href={`/about`}
                      platform={"nextjs"}
                    >
                      <Button
                        active={true}
                        className={classNames(
                          "__wab_instance",
                          sty.button__x9I3F
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8Ehy4
                          )}
                        >
                          {"About"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__fEiti
                      )}
                      component={Link}
                      href={`/timeline`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ufSm
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__viCk7
                          )}
                        >
                          {"Timeline"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__r3Vvt
                      )}
                      component={Link}
                      href={`/clipping`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__qHbWm
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hbK2Y
                          )}
                        >
                          {"Clipping"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__w2L1K
                      )}
                      component={Link}
                      href={`/articles`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__x9Y5N
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__asQr7
                          )}
                        >
                          {"Articles"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__j4B2
                      )}
                      component={Link}
                      href={`/contact`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ybD3E
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vhRw8
                          )}
                        >
                          {"Contact"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                  </p.Stack>
                }
                openButton={
                  <React.Fragment>
                    {true ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__a002O)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        src={"https://static1.plasmic.app/menu.svg" as const}
                      />
                    ) : null}
                    {true ? (
                      <_Icon
                        className={classNames(projectcss.all, sty.svg__sq4Lr)}
                        role={"img"}
                      />
                    ) : null}
                  </React.Fragment>
                }
                responsiveBreakpoint={768 as const}
              />
            }
          >
            {"About"}
          </HeaderHeroPage>
          <div className={classNames(projectcss.all, sty.freeBox__utncK)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__xiaNs)}
            >
              <div className={classNames(projectcss.all, sty.column__leszn)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ykmIg)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vtsSs)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__rrg41
                        )}
                      >
                        {"Mini"}
                      </h3>
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__ugxP3
                        )}
                      >
                        {"Bio"}
                      </h2>
                    </div>
                  ) : null}
                  <p
                    data-plasmic-name={
                      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8"
                    }
                    data-plasmic-override={
                      overrides.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "Natalie Unterstell is a Brazil native on a mission to build a climate-resilient and deforestation-free world. Having lived and worked in the Amazon rainforest, she has worked closely with indigenous peoples as well as policymakers, activists and business leaders.\n\nShe served as the Head of Sustainable Development for the Brazilian Presidency, the Head of the Amazonas State' Climate Change Center and as one of Brazil's negotiators at the United Nations Framework Convention on Climate Change.\n\nShe is the founder of multiple policy think tanks and advocacy groups focused on climate leadership, gender equality and environmental stewardship, and she serves as advisor to various initiatives, including the Women's League for the Ocean.\n\nIn 2018, she was selected for the largest all-female expedition to Antarctica, Homeward Bound, where she reaffirmed her commitment to advance climate action. Natalie has a Masters in Public Administration from Harvard University, and a Bachelor in Business Administration from Fundacao Getulio Vargas (FGV).\n\nHere are Natalie's photos for professional use. For example, the material is available for presentations and banners to promote events where Natalie will be present. "
                          }
                        </React.Fragment>
                        {
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__tEc7
                            )}
                            component={Link}
                            href={
                              "https://drive.google.com/drive/folders/1oJECRYWG4rWFHK8lWzoITu0Dfk1D17bl?usp=sharing" as const
                            }
                            platform={"nextjs"}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Click here"
                              : "Click here"}
                          </p.PlasmicLink>
                        }
                        <React.Fragment>
                          {
                            " to have access and download the photos in high resolution. "
                          }
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "Natalie Unterstell is a Brazil native on a mission to build a climate-resilient and deforestation-free world. Having lived and worked in the Amazon rainforest, she has worked closely with indigenous peoples as well as policymakers, activists and business leaders.\n\nShe served as the Head of Sustainable Development for the Brazilian Presidency, the Head of the Amazonas State' Climate Change Center and as one of Brazil's negotiators at the United Nations Framework Convention on Climate Change.\n\nShe is the founder of multiple policy think tanks and advocacy groups focused on climate leadership, gender equality and environmental stewardship, and she serves as advisor to various initiatives, including the Women's League for the Ocean.\n\nIn 2018, she was selected for the largest all-female expedition to Antarctica, Homeward Bound, where she reaffirmed her commitment to advance climate action. Natalie has a Masters in Public Administration from Harvard University, and a Bachelor in Business Administration from Fundacao Getulio Vargas (FGV).\n\nHere are Natalie's photos for professional use. For example, the material is available for presentations and banners to promote events where Natalie will be present. "
                          }
                        </React.Fragment>
                        {
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__tEc7
                            )}
                            component={Link}
                            href={
                              "https://drive.google.com/drive/folders/1oJECRYWG4rWFHK8lWzoITu0Dfk1D17bl?usp=sharing" as const
                            }
                            platform={"nextjs"}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Click here"
                              : "Click here"}
                          </p.PlasmicLink>
                        }
                        <React.Fragment>
                          {
                            " to have access and download the photos in high resolution. \n"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </p>
                </p.Stack>
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.column__yjsPa)}
                />
              ) : null}
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__w4PR)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__taMGt)}
            >
              <div className={classNames(projectcss.all, sty.column__j53TH)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qiy0D)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__fVvEy
                    )}
                  >
                    {"Purpose"}
                  </h3>
                  <h2
                    data-plasmic-name={
                      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5"
                    }
                    data-plasmic-override={
                      overrides.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5
                    )}
                  >
                    {"To solve the climate crisis in one generation, ours."}
                  </h2>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__dcwGo)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jeSr)}
                  />
                ) : null}
              </div>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__pdj7F)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__kmZxt)}
            >
              <div className={classNames(projectcss.all, sty.column__j3Rvn)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fqPa2)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__c9Ib8
                    )}
                  >
                    {"Vision"}
                  </h3>
                  <h2
                    data-plasmic-name={
                      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6"
                    }
                    data-plasmic-override={
                      overrides.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6
                    )}
                  >
                    {
                      "To lead national and international projects for the environment and equality."
                    }
                  </h2>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__jZgr6)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__giEzJ)}
                />
              </div>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___5QbJ6)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__nX2Jb)}
            >
              <div className={classNames(projectcss.all, sty.column__lpsHc)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___2VwfD)}
                >
                  <h3
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.title
                    )}
                  >
                    {"Propose"}
                  </h3>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__eg6BZ
                    )}
                  >
                    {"Build a climate-resilient and deforestation-free world"}
                  </h2>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__tuT7X)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__mOiPb)}
                />
              </div>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wmu1G)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__dyyGp)}
            >
              <div className={classNames(projectcss.all, sty.column__nRbNb)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ncdVa)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xwXwR)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__uSPzN
                        )}
                      >
                        {"Professional"}
                      </h3>
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__fEnN4
                        )}
                      >
                        {"Interview"}
                      </h2>
                    </div>
                  ) : null}
                  <p
                    data-plasmic-name={
                      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7"
                    }
                    data-plasmic-override={
                      overrides.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7
                    )}
                  >
                    {
                      "Active in environmental conventions and projects, Natalie is invited for interviews by national-level broadcasters as a spokesperson for news and a leader in practical actions. "
                    }
                  </p>
                </p.Stack>
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.column__qWfL)} />
              ) : null}
            </p.Stack>
          </div>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sQJx)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__vivGy)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__xgax)}
                >
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__nRvT9
                    )}
                    code={
                      '<iframe width="100%" height="100%" src="https://www.youtube.com/embed/8sz-7R45Wg4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>' as const
                    }
                  />
                </p.Stack>
                <div className={classNames(projectcss.all, sty.column__fv9Xf)}>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__sfNp3
                    )}
                    code={
                      '<iframe width="100%" height="100%" src="https://www.youtube.com/embed/c685bptJSHo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>' as const
                    }
                  />
                </div>
              </p.Stack>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vjEZt)}
                >
                  <h4
                    data-plasmic-name={"h4"}
                    data-plasmic-override={overrides.h4}
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4
                    )}
                  >
                    {
                      "If you want to check Natalie’s personal and professional journey year by year."
                    }
                  </h4>
                  <Button
                    className={classNames("__wab_instance", sty.button__idaTg)}
                    color={"sand" as const}
                    link={`/timeline`}
                    shape={"sharp" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ibGhP
                      )}
                    >
                      {"Click Here"}
                    </div>
                  </Button>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mv9T7)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__ywO0I)}
            >
              <div className={classNames(projectcss.all, sty.column__gt3V2)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__t636O)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bnCxL)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__ruk7
                        )}
                      >
                        {"Natalie"}
                      </h3>
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__tvsH3
                        )}
                      >
                        {"Initiatives"}
                      </h2>
                    </div>
                  ) : null}
                </p.Stack>
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.column__tysAu)}
                />
              ) : null}
            </p.Stack>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lRDs)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__l7Pet)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__xJcF4
                    )}
                    component={Link}
                    href={
                      "https://www.climatecolab.org/contests/2016/land-use-agriculture-forestry-livestock/c/proposal/1330806" as const
                    }
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <InitiativesCard
                      className={classNames(
                        "__wab_instance",
                        sty.initiativesCard__jfN0F
                      )}
                      sourceName={"2016"}
                    />
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__vrqvf
                    )}
                    component={Link}
                    href={"http://www.politicaporinteiro.org" as const}
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <InitiativesCard
                      category={"Creator"}
                      className={classNames(
                        "__wab_instance",
                        sty.initiativesCard__hizqb
                      )}
                      excerpt={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sBbBj
                          )}
                        >
                          {
                            "The project Política Por Inteiro was developed in 2019 to monitor political signals of relevant changes announced (risks) or carried out (acts) by the Federal Executive Branch, as well as their effects."
                          }
                        </div>
                      }
                      sourceName={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0FEWv
                          )}
                        >
                          {"2019"}
                        </div>
                      }
                      title={"Política por inteiro"}
                    />
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__eiKbe
                    )}
                    component={Link}
                    href={"https://clima2030.org/" as const}
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <InitiativesCard
                      className={classNames(
                        "__wab_instance",
                        sty.initiativesCard__sm4Km
                      )}
                      excerpt={
                        "The Climate & Development initiative is an articulation in favor of a new national development project supported by a low-carbon economy."
                      }
                      sourceName={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k4Uga
                          )}
                        >
                          {"2021"}
                        </div>
                      }
                      title={"Clima Desenvolvimento"}
                    />
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ykBtf
                    )}
                    component={Link}
                    href={
                      "https://www.ggfutures.net/analysis/ggf2035-climate-related-conflict" as const
                    }
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <InitiativesCard
                      category={"Fellow"}
                      className={classNames(
                        "__wab_instance",
                        sty.initiativesCard__g9O7Z
                      )}
                      excerpt={
                        "The Global Governance Futures – Robert Bosch Foundation Multilateral Dialogues (GGF) program brings together exceptional young professionals to look ahead to the year 2035 and think of better ways to address global challenges. The working group on the future of climate-related conflict considers climate change a significant environmental threat and identified four key trends that pervade our scenarios for 2035."
                      }
                      sourceName={"2020"}
                      title={"Global Governance Futures"}
                    />
                  </p.PlasmicLink>
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          >
            <NavigationBar
              brand={
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__pCq4N
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <NatalieUnterstellLogoIcon
                    className={classNames(projectcss.all, sty.svg__xuAr)}
                    role={"img"}
                  />
                </p.PlasmicLink>
              }
              className={classNames("__wab_instance", sty.navigationBar___16Qz)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___7Op3)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/close.svg" as const}
                />
              }
              forceOpenMenu={true}
              itemsGap={32 as const}
              menuItems={
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__e8Nf5)}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__qdhn
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__dihNw
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      {"Home"}
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___94Zzy
                    )}
                    component={Link}
                    href={`/about`}
                    platform={"nextjs"}
                  >
                    <Button
                      active={true}
                      className={classNames("__wab_instance", sty.button__hIa7)}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aR5K
                        )}
                      >
                        {"About"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__yTtj
                    )}
                    component={Link}
                    href={`/timeline`}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__hu8Yz
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f1VM
                        )}
                      >
                        {"Timeline"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__qougR
                    )}
                    component={Link}
                    href={`/clipping`}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__v5Ufk
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oCmzi
                        )}
                      >
                        {"Clipping"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__aZmBw
                    )}
                    component={Link}
                    href={`/articles`}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames("__wab_instance", sty.button__uBpx)}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wVhrF
                        )}
                      >
                        {"Articles"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__zrviu
                    )}
                    component={Link}
                    href={`/contact`}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__f6HXu
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rX8Nw
                        )}
                      >
                        {"Contact"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                </p.Stack>
              }
              openButton={
                <React.Fragment>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__qqwHx)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/menu.svg" as const}
                  />

                  <_Icon
                    className={classNames(projectcss.all, sty.svg__yArAp)}
                    role={"img"}
                  />
                </React.Fragment>
              }
              responsiveBreakpoint={768 as const}
            />
          </Footer>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroPage",
    "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8",
    "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5",
    "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6",
    "title",
    "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7",
    "h4",
    "footer"
  ],
  headerHeroPage: ["headerHeroPage"],
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8:
    [
      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8"
    ],
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5:
    [
      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5"
    ],
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6:
    [
      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6"
    ],
  title: ["title"],
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7:
    [
      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7"
    ],
  h4: ["h4"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroPage: typeof HeaderHeroPage;
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8: "p";
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5: "h2";
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6: "h2";
  title: "h3";
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7: "p";
  h4: "h4";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout__VariantsArgs;
    args?: PlasmicAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAbout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroPage: makeNodeComponent("headerHeroPage"),
    loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8:
      makeNodeComponent(
        "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati8"
      ),
    loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5:
      makeNodeComponent(
        "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati5"
      ),
    loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6:
      makeNodeComponent(
        "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati6"
      ),
    title: makeNodeComponent("title"),
    loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7:
      makeNodeComponent(
        "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati7"
      ),
    h4: makeNodeComponent("h4"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "About",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
