// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jodssu5PmGaRR5vFRfdqKh
// Component: A5YKWg0MH2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_nu_website.module.css"; // plasmic-import: jodssu5PmGaRR5vFRfdqKh/projectcss
import sty from "./PlasmicSectionTitle.module.css"; // plasmic-import: A5YKWg0MH2/css

import _Icon from "./icons/PlasmicIcon___"; // plasmic-import: 6Vrd0S0dtKQ/icon

export type PlasmicSectionTitle__VariantMembers = {
  unnamedVariant: "unnamedVariant";
};
export type PlasmicSectionTitle__VariantsArgs = {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicSectionTitle__VariantsArgs;
export const PlasmicSectionTitle__VariantProps = new Array<VariantPropType>(
  "unnamedVariant"
);

export type PlasmicSectionTitle__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSectionTitle__ArgsType;
export const PlasmicSectionTitle__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicSectionTitle__OverridesType = {
  root?: p.Flex<"div">;
  sectionTitle?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  h1?: p.Flex<"h1">;
};

export interface DefaultSectionTitleProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionTitle__RenderFunc(props: {
  variants: PlasmicSectionTitle__VariantsArgs;
  args: PlasmicSectionTitle__ArgsType;
  overrides: PlasmicSectionTitle__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootunnamedVariant]: hasVariant(
            $state,
            "unnamedVariant",
            "unnamedVariant"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"sectionTitle"}
        data-plasmic-override={overrides.sectionTitle}
        className={classNames(projectcss.all, sty.sectionTitle, {
          [sty.sectionTitleunnamedVariant]: hasVariant(
            $state,
            "unnamedVariant",
            "unnamedVariant"
          )
        })}
      >
        {(
          hasVariant($state, "unnamedVariant", "unnamedVariant") ? true : true
        ) ? (
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(projectcss.all, projectcss.h2, sty.h2, {
              [sty.h2unnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Who is",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenunnamedVariant]: hasVariant(
                  $state,
                  "unnamedVariant",
                  "unnamedVariant"
                )
              })
            })}
          </h2>
        ) : null}
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__f1Lwd)}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(projectcss.all, projectcss.h1, sty.h1)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Natalie",
              value: args.slot,
              className: classNames(sty.slotTargetSlot)
            })}
          </h1>
          <div className={classNames(projectcss.all, sty.freeBox__dapC8)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <_Icon
                  className={classNames(projectcss.all, sty.svg___0Sy1M)}
                  role={"img"}
                />
              ),

              value: args.slot2
            })}
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sectionTitle", "h2", "h1"],
  sectionTitle: ["sectionTitle", "h2", "h1"],
  h2: ["h2"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionTitle: "div";
  h2: "h2";
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionTitle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionTitle__VariantsArgs;
    args?: PlasmicSectionTitle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionTitle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSectionTitle__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSectionTitle__ArgProps,
          internalVariantPropNames: PlasmicSectionTitle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionTitle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionTitle";
  } else {
    func.displayName = `PlasmicSectionTitle.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionTitle = Object.assign(
  // Top-level PlasmicSectionTitle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionTitle: makeNodeComponent("sectionTitle"),
    h2: makeNodeComponent("h2"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicSectionTitle
    internalVariantProps: PlasmicSectionTitle__VariantProps,
    internalArgProps: PlasmicSectionTitle__ArgProps
  }
);

export default PlasmicSectionTitle;
/* prettier-ignore-end */
