// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jodssu5PmGaRR5vFRfdqKh
// Component: AgkD8Q9m9b9Ff

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: iaT36dnZJl/codeComponent
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: jGsW_a0TMYi/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import SectionTitle from "../../SectionTitle"; // plasmic-import: A5YKWg0MH2/component
import Factsheet from "../../Factsheet"; // plasmic-import: uzAXvYpYsd/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import Footer from "../../Footer"; // plasmic-import: oAWDpYdN0s/component

import { useScreenVariants as useScreenVariants_0Uf6PR80TuUp8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0UF6pR80tuUP8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_nu_website.module.css"; // plasmic-import: jodssu5PmGaRR5vFRfdqKh/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: AgkD8Q9m9b9Ff/css

import NatalieUnterstellLogoIcon from "./icons/PlasmicIcon__NatalieUnterstellLogo"; // plasmic-import: A4jG8WrNiS0Xj/icon
import _Icon from "./icons/PlasmicIcon___"; // plasmic-import: 6Vrd0S0dtKQ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: iemRUT8B78Y/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: tfqLjeUE7Y3/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: XVD3DQgHwQ_/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: s6SBstulsIq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: GPUNnXp_ix/icon

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  head?: p.Flex<typeof PlasmicHead>;
  slider?: p.Flex<typeof Slider>;
  reveal?: p.Flex<typeof Reveal>;
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati?: p.Flex<"p">;
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3?: p.Flex<"p">;
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2?: p.Flex<"p">;
  h3?: p.Flex<"h3">;
  embedHtml?: p.Flex<typeof Embed>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0Uf6PR80TuUp8()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHome.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHome.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHome.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHome.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHome.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <PlasmicHead
            data-plasmic-name={"head"}
            data-plasmic-override={overrides.head}
            className={classNames("__wab_instance", sty.head)}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__gnxyd)}>
              <NavigationBar
                brand={
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__viHoq
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <NatalieUnterstellLogoIcon
                      className={classNames(projectcss.all, sty.svg__o1CaM)}
                      role={"img"}
                    />
                  </p.PlasmicLink>
                }
                className={classNames(
                  "__wab_instance",
                  sty.navigationBar___5LA83
                )}
                closeButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__pMa6)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/close.svg" as const}
                  />
                }
                forceOpenMenu={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? false
                    : true
                }
                itemsGap={32 as const}
                menuItems={
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ebWVu)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___4Cwla
                      )}
                      component={Link}
                      href={`/`}
                      platform={"nextjs"}
                    >
                      <Button
                        active={true}
                        className={classNames(
                          "__wab_instance",
                          sty.button___4Gqqh
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        {"Home"}
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__eadSd
                      )}
                      component={Link}
                      href={`/about`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___5F0It
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vmpi9
                          )}
                        >
                          {"About"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__kJKfl
                      )}
                      component={Link}
                      href={`/timeline`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___0VUkG
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l600O
                          )}
                        >
                          {"Timeline"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__huuVe
                      )}
                      component={Link}
                      href={`/clipping`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__gwNcg
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vCaxm
                          )}
                        >
                          {"Clipping"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__bu8Ph
                      )}
                      component={Link}
                      href={`/articles`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___6VkvG
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y8JTp
                          )}
                        >
                          {"articles"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__rJacH
                      )}
                      component={Link}
                      href={`/contact`}
                      platform={"nextjs"}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__w0FId
                        )}
                        color={"clear" as const}
                        shape={"sharp" as const}
                        size={"minimal" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bFwdP
                          )}
                        >
                          {"Contact"}
                        </div>
                      </Button>
                    </p.PlasmicLink>
                  </p.Stack>
                }
                openButton={
                  <React.Fragment>
                    {true ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__uOIfn)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        src={"https://static1.plasmic.app/menu.svg" as const}
                      />
                    ) : null}
                    {true ? (
                      <_Icon
                        className={classNames(projectcss.all, sty.svg__drueo)}
                        role={"img"}
                      />
                    ) : null}
                  </React.Fragment>
                }
                responsiveBreakpoint={768 as const}
              />
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__plEj)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__cmeJb)}>
                  <div
                    className={classNames(projectcss.all, sty.columns__dAvLr)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__a5StV)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__ml9N0
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {"The planet needs  you \n"}
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#F8D631" }}
                          >
                            {"Be the change now"}
                          </span>
                        </React.Fragment>
                      </h1>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___29F9R
                        )}
                        color={"white" as const}
                        endIcon={
                          <Icon2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___12ZnK
                            )}
                            role={"img"}
                          />
                        }
                        link={"#whois" as const}
                        outline={true}
                        shape={"sharp" as const}
                        size={"compact" as const}
                      >
                        {"Learn More"}
                      </Button>
                    </p.Stack>
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__qaNsN
                        )}
                      />
                    ) : null}
                  </div>
                </div>
              ) : null}
              <Slider
                data-plasmic-name={"slider"}
                data-plasmic-override={overrides.slider}
                arrows={false}
                autoplay={true}
                autoplaySpeed={3000 as const}
                className={classNames("__wab_instance", sty.slider)}
                fade={true}
                pauseOnFocus={true}
                speed={5000 as const}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ffvtj)}
                  />
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zjemt)}
                  />
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mZm7H)}
                  />
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rw4Ap)}
                  />
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5KXx)}
                  />
                ) : null}
              </Slider>
            </div>
          ) : null}
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ve0Uy)}
            id={"whois" as const}
          >
            <Reveal
              data-plasmic-name={"reveal"}
              data-plasmic-override={overrides.reveal}
              big={true}
              cascade={true}
              className={classNames("__wab_instance", sty.reveal)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___5Urg)}
              >
                <div className={classNames(projectcss.all, sty.column__vY1W5)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kDzLc)}
                  >
                    <SectionTitle
                      className={classNames(
                        "__wab_instance",
                        sty.sectionTitle__mAby
                      )}
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tO7Xs
                          )}
                        >
                          {"Natalie"}
                        </div>
                      }
                    />

                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__pKiG6
                      )}
                    >
                      {
                        "Natalie Unterstell is a Brazil native on a mission to build a climate-resilient and deforestation-free world. Having lived and worked in the Amazon rainforest, she has worked closely with indigenous peoples as well as policymakers, activists and business leaders."
                      }
                    </p>
                  </p.Stack>
                </div>
                <div className={classNames(projectcss.all, sty.column__yXb9N)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__xxY2)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/nu_website/images/unatalieFirstImageResizedpng.png",
                      fullWidth: 1024,
                      fullHeight: 1535,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </p.Stack>
            </Reveal>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__tkDzD)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__rkcd)}
                >
                  <SectionTitle
                    className={classNames(
                      "__wab_instance",
                      sty.sectionTitle__y3RnZ
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cDSc
                        )}
                      >
                        {"She do"}
                      </div>
                    }
                    slot2={
                      <_Icon
                        className={classNames(projectcss.all, sty.svg___9LxvA)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aY7WR
                      )}
                    >
                      {"What does"}
                    </div>
                  </SectionTitle>
                  <p
                    data-plasmic-name={
                      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati"
                    }
                    data-plasmic-override={
                      overrides.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati
                    )}
                  >
                    {
                      "Natalie plays a leading role in the public management of environmental projects. She is the founder of the Tanaloa think tank and the creator of the \"Política por Inteiro'' initiative, which monitors relevant public policies in Brazil. She is also on the board of SOS Mata Atlântica, Centro Brasil no Clima and Sistema B Brasil."
                    }
                  </p>
                </p.Stack>
              ) : null}
            </p.Stack>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__ajNBm)}
              >
                <div className={classNames(projectcss.all, sty.column__sOnf7)}>
                  <SectionTitle
                    className={classNames(
                      "__wab_instance",
                      sty.sectionTitle__s1Vi8
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eJzwv
                        )}
                      >
                        {"She do"}
                      </div>
                    }
                    slot2={
                      <_Icon
                        className={classNames(projectcss.all, sty.svg__fd6QP)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hxWDi
                      )}
                    >
                      {"What does"}
                    </div>
                  </SectionTitle>
                </div>
                <div className={classNames(projectcss.all, sty.column__qodDj)}>
                  <p
                    data-plasmic-name={
                      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3"
                    }
                    data-plasmic-override={
                      overrides.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3
                    )}
                  >
                    {
                      "Natalie plays a leading role in the public management of environmental projects. She is the founder of the Tanaloa think tank and the creator of the \"Política por Inteiro'' initiative, which monitors relevant public policies in Brazil. She is also on the board of SOS Mata Atlântica, Centro Brasil no Clima and Sistema B Brasil."
                    }
                  </p>
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
          <div className={classNames(projectcss.all, sty.freeBox__kLxNo)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__yU6Tr)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("120%" as const)
                  : ("auto" as const)
              }
              loading={"lazy" as const}
              src={{
                src: "/plasmic/nu_website/images/unatalieOpenArmsRemovedBg1Png.png",
                fullWidth: 1209,
                fullHeight: 442,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.columns__xhGkc)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__ynevE)}
              >
                <SectionTitle
                  className={classNames(
                    "__wab_instance",
                    sty.sectionTitle__vsHbS
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Xfz0
                      )}
                    >
                      {"She do it"}
                    </div>
                  }
                  slot2={
                    <_Icon
                      className={classNames(projectcss.all, sty.svg__gHxKm)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4U5Mx
                    )}
                  >
                    {"Why and how does"}
                  </div>
                </SectionTitle>
                <p
                  data-plasmic-name={
                    "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2"
                  }
                  data-plasmic-override={
                    overrides.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2
                  )}
                >
                  {
                    "Natalie wants to solve the climate crisis in one generation, ours. She is a speaker, negotiator and entrepreneur for the environment that gets involved in several national and international initiatives, with a focus on public management. "
                  }
                </p>
                <Button
                  buttonType={"" as const}
                  className={classNames("__wab_instance", sty.button___6URn9)}
                  color={"white" as const}
                  endIcon={
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__no6)}
                      role={"img"}
                    />
                  }
                  link={`/about`}
                  outline={true}
                  shape={"sharp" as const}
                  size={"compact" as const}
                >
                  {"Learn More"}
                </Button>
              </p.Stack>
            </div>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hZq8A)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ckBr1)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__s3XM)}
              >
                <SectionTitle
                  className={classNames(
                    "__wab_instance",
                    sty.sectionTitle___69BmS
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nq5G1
                      )}
                    >
                      {"Factsheet"}
                    </div>
                  }
                  slot2={
                    (
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <_Icon
                        className={classNames(projectcss.all, sty.svg__bQxe9)}
                        role={"img"}
                      />
                    ) : null
                  }
                  unnamedVariant={true}
                >
                  {"Factsheet"}
                </SectionTitle>
                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__rv48B
                  )}
                >
                  {
                    "Sustainability seeks the rational use of natural resources without compromising the environment so that the current generation can develop and there is an opportunity for future generations."
                  }
                </p>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vm4P)}
              >
                <Factsheet
                  className={classNames(
                    "__wab_instance",
                    sty.factsheet___7UjYe
                  )}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9L11Z
                      )}
                    >
                      {"189"}
                    </div>
                  }
                  slot={
                    <Button
                      buttonType={"" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.button__fslaw
                      )}
                      color={"white" as const}
                      endIcon={
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__uERM)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://s3.amazonaws.com/alerta.mapbiomas.org/rad2021/RAD2021_Completo_FINAL_Rev1.pdf" as const
                      }
                      outline={true}
                      shape={"sharp" as const}
                      size={"compact" as const}
                    >
                      {"Map Biomas Report "}
                    </Button>
                  }
                  title={"Deforestation"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yBgK
                    )}
                  >
                    {
                      "hectares of native vegetation were lost every hour in 2021 in Brazil. In the Amazon Rainforest, the rate equals about 18 trees felled per second."
                    }
                  </div>
                </Factsheet>
                <Factsheet
                  className={classNames("__wab_instance", sty.factsheet__do9Rg)}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rTaN1
                      )}
                    >
                      {"+1.5°C"}
                    </div>
                  }
                  slot={
                    <Button
                      buttonType={"" as const}
                      className={classNames(
                        "__wab_instance",
                        sty.button__dbeRm
                      )}
                      color={"white" as const}
                      endIcon={
                        <Icon2Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___17Dcb
                          )}
                          role={"img"}
                        />
                      }
                      link={
                        "https://www.ipcc.ch/sr15/resources/headline-statements/" as const
                      }
                      outline={true}
                      shape={"sharp" as const}
                      size={"compact" as const}
                    >
                      {"2IPCC Report "}
                    </Button>
                  }
                  title={"Global Warming"}
                >
                  {
                    "will be reached on Earth between 2030 and 2052, leading the planet to the edge of catastrophe."
                  }
                </Factsheet>
                <Factsheet
                  className={classNames(
                    "__wab_instance",
                    sty.factsheet___7SuUc
                  )}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vHvB
                      )}
                    >
                      {"400"}
                    </div>
                  }
                  slot={
                    <Button
                      buttonType={"" as const}
                      className={classNames("__wab_instance", sty.button__gqlP)}
                      color={"white" as const}
                      endIcon={
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__yWySz)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://data.worldbank.org/indicator/EN.ATM.CO2E.KT?locations=BR" as const
                      }
                      outline={true}
                      shape={"sharp" as const}
                      size={"compact" as const}
                    >
                      {"Data world bank"}
                    </Button>
                  }
                  title={"Carbon"}
                >
                  {
                    "kilotons of carbon are produced annually in Brazil, which is among the ten most prominent in the world."
                  }
                </Factsheet>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <div className={classNames(projectcss.all, sty.freeBox___1O7N)}>
            <div className={classNames(projectcss.all, sty.freeBox__yqS4)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wFyM3)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1YKpU)}
                  >
                    <SectionTitle
                      className={classNames(
                        "__wab_instance",
                        sty.sectionTitle__qXmm4
                      )}
                      slot={
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1___0WeG
                          )}
                        >
                          {"Get updated about her initiatives "}
                        </h1>
                      }
                      slot2={null}
                    >
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        {"Follow Natalie"}
                      </h3>
                    </SectionTitle>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___74WJs
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jwpQj
                        )}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__tgM0
                          )}
                          component={Link}
                          href={
                            "https://br.linkedin.com/in/unterstellnatalie?original_referer=https%3A%2F%2Fwww.google.com%2F" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <Icon28Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__uh8CD
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__s2YbS
                          )}
                          component={Link}
                          href={
                            "https://twitter.com/unatalie?s=20&t=lOdurbUrmxEQNjIY53wFwA" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <Icon3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___4WlkW
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___4Lg7T
                          )}
                          component={Link}
                          href={"https://www.instagram.com/unatalie/" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xmUm2
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__chebO)}
              >
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={
                    '<a class="twitter-timeline" href="https://twitter.com/unatalie?ref_src=twsrc%5Etfw">Tweets by unatalie</a> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>' as const
                  }
                />
              </p.Stack>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          >
            <NavigationBar
              brand={
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__svUt6
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <NatalieUnterstellLogoIcon
                    className={classNames(projectcss.all, sty.svg___8Lm1)}
                    role={"img"}
                  />
                </p.PlasmicLink>
              }
              className={classNames("__wab_instance", sty.navigationBar___9UzK)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__nH1Ax)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/close.svg" as const}
                />
              }
              forceOpenMenu={true}
              itemsGap={32 as const}
              menuItems={
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__unTkV)}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___6De0Y
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <Button
                      active={true}
                      className={classNames(
                        "__wab_instance",
                        sty.button__l7KRi
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      {"Home"}
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__qhdhL
                    )}
                    component={Link}
                    href={`/about`}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__gf1QN
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tokNo
                        )}
                      >
                        {"About"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__sviIt
                    )}
                    component={Link}
                    href={`/timeline`}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___7D6Ll
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aA4Ac
                        )}
                      >
                        {"Timeline"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__psLw8
                    )}
                    component={Link}
                    href={`/clipping`}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__vf6Fc
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__saLSx
                        )}
                      >
                        {"Clipping"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__psaJ6
                    )}
                    component={Link}
                    href={`/articles`}
                    platform={"nextjs"}
                    target={undefined}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__eDwLv
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oqmxT
                        )}
                      >
                        {"Articles"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__bqutk
                    )}
                    component={Link}
                    href={`/contact`}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ml1I2
                      )}
                      color={"clear" as const}
                      shape={"sharp" as const}
                      size={"minimal" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q4RpW
                        )}
                      >
                        {"Contact"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                </p.Stack>
              }
              openButton={
                <React.Fragment>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__wpk0Q)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/menu.svg" as const}
                  />

                  <_Icon
                    className={classNames(projectcss.all, sty.svg___5EDyb)}
                    role={"img"}
                  />
                </React.Fragment>
              }
              responsiveBreakpoint={768 as const}
            />
          </Footer>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "head",
    "slider",
    "reveal",
    "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati",
    "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3",
    "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2",
    "h3",
    "embedHtml",
    "footer"
  ],
  head: ["head"],
  slider: ["slider"],
  reveal: ["reveal"],
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati:
    [
      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati"
    ],
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3:
    [
      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3"
    ],
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2:
    [
      "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2"
    ],
  h3: ["h3"],
  embedHtml: ["embedHtml"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  head: typeof PlasmicHead;
  slider: typeof Slider;
  reveal: typeof Reveal;
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati: "p";
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3: "p";
  loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2: "p";
  h3: "h3";
  embedHtml: typeof Embed;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    head: makeNodeComponent("head"),
    slider: makeNodeComponent("slider"),
    reveal: makeNodeComponent("reveal"),
    loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati:
      makeNodeComponent(
        "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati"
      ),
    loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3:
      makeNodeComponent(
        "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati3"
      ),
    loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2:
      makeNodeComponent(
        "loremIpsumBrandedContentRickardJakobssonGindeIratOledesSamafalingDibevisPenOchTrilevisDenKahanarEndotesRinadeGunAhmedGrafenEttChristerObergOgonGalararBelogiEftersomFarTorggangareFarenForYharMarknadsplatserLaxrutGanadeHaskaMobilstrumpaPredGimalPersonaliseringOmAlbinLindgrenAkeEkstromProkottaPreharPredeAgnostimodernBokstavsdrogDylingPlattfilmMicroMomentsJuloreTulertadSprakekonomiReklejmaAnEpikrati2"
      ),
    h3: makeNodeComponent("h3"),
    embedHtml: makeNodeComponent("embedHtml"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Homepage",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/c5e93718de7cb14c13cfc0d9d69321f5.svg",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
