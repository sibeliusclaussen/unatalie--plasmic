// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jodssu5PmGaRR5vFRfdqKh
// Component: RpwP78mekAf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_0Uf6PR80TuUp8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0UF6pR80tuUP8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_nu_website.module.css"; // plasmic-import: jodssu5PmGaRR5vFRfdqKh/projectcss
import sty from "./PlasmicInitiativesCard.module.css"; // plasmic-import: RpwP78mekAf/css

export type PlasmicInitiativesCard__VariantMembers = {};
export type PlasmicInitiativesCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicInitiativesCard__VariantsArgs;
export const PlasmicInitiativesCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInitiativesCard__ArgsType = {
  category?: React.ReactNode;
  title?: React.ReactNode;
  excerpt?: React.ReactNode;
  sourceName?: React.ReactNode;
};
type ArgPropType = keyof PlasmicInitiativesCard__ArgsType;
export const PlasmicInitiativesCard__ArgProps = new Array<ArgPropType>(
  "category",
  "title",
  "excerpt",
  "sourceName"
);

export type PlasmicInitiativesCard__OverridesType = {
  root?: p.Flex<"div">;
  articleInfo?: p.Flex<"div">;
  titleExcerpt?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  p?: p.Flex<"p">;
  publisher?: p.Flex<"div">;
  year?: p.Flex<"h5">;
  category?: p.Flex<"div">;
};

export interface DefaultInitiativesCardProps {
  category?: React.ReactNode;
  title?: React.ReactNode;
  excerpt?: React.ReactNode;
  sourceName?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInitiativesCard__RenderFunc(props: {
  variants: PlasmicInitiativesCard__VariantsArgs;
  args: PlasmicInitiativesCard__ArgsType;
  overrides: PlasmicInitiativesCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0Uf6PR80TuUp8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"articleInfo"}
          data-plasmic-override={overrides.articleInfo}
          hasGap={true}
          className={classNames(projectcss.all, sty.articleInfo)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"titleExcerpt"}
              data-plasmic-override={overrides.titleExcerpt}
              hasGap={true}
              className={classNames(projectcss.all, sty.titleExcerpt)}
            >
              <h4
                data-plasmic-name={"h4"}
                data-plasmic-override={overrides.h4}
                className={classNames(projectcss.all, projectcss.h4, sty.h4)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Solve MIT",
                  value: args.title,
                  className: classNames(sty.slotTargetTitle)
                })}
              </h4>
              <p
                data-plasmic-name={"p"}
                data-plasmic-override={overrides.p}
                className={classNames(projectcss.all, projectcss.p, sty.p)}
              >
                {p.renderPlasmicSlot({
                  defaultContents:
                    "A project of the MIT Center for Collective Intelligence in collaboration with many other organizations. Solve is an initiative of the Massachusetts Institute of Technology that advances lasting solutions from tech entrepreneurs to address the world's most pressing problems.",
                  value: args.excerpt,
                  className: classNames(sty.slotTargetExcerpt)
                })}
              </p>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"publisher"}
              data-plasmic-override={overrides.publisher}
              hasGap={true}
              className={classNames(projectcss.all, sty.publisher)}
            >
              <h5
                data-plasmic-name={"year"}
                data-plasmic-override={overrides.year}
                className={classNames(projectcss.all, projectcss.h5, sty.year)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "2022",
                  value: args.sourceName,
                  className: classNames(sty.slotTargetSourceName)
                })}
              </h5>
              {true ? (
                <div
                  data-plasmic-name={"category"}
                  data-plasmic-override={overrides.category}
                  className={classNames(projectcss.all, sty.category)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Supporter",
                    value: args.category,
                    className: classNames(sty.slotTargetCategory)
                  })}
                </div>
              ) : null}
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "articleInfo",
    "titleExcerpt",
    "h4",
    "p",
    "publisher",
    "year",
    "category"
  ],
  articleInfo: [
    "articleInfo",
    "titleExcerpt",
    "h4",
    "p",
    "publisher",
    "year",
    "category"
  ],
  titleExcerpt: ["titleExcerpt", "h4", "p"],
  h4: ["h4"],
  p: ["p"],
  publisher: ["publisher", "year", "category"],
  year: ["year"],
  category: ["category"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  articleInfo: "div";
  titleExcerpt: "div";
  h4: "h4";
  p: "p";
  publisher: "div";
  year: "h5";
  category: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInitiativesCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInitiativesCard__VariantsArgs;
    args?: PlasmicInitiativesCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInitiativesCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInitiativesCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInitiativesCard__ArgProps,
          internalVariantPropNames: PlasmicInitiativesCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInitiativesCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInitiativesCard";
  } else {
    func.displayName = `PlasmicInitiativesCard.${nodeName}`;
  }
  return func;
}

export const PlasmicInitiativesCard = Object.assign(
  // Top-level PlasmicInitiativesCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    articleInfo: makeNodeComponent("articleInfo"),
    titleExcerpt: makeNodeComponent("titleExcerpt"),
    h4: makeNodeComponent("h4"),
    p: makeNodeComponent("p"),
    publisher: makeNodeComponent("publisher"),
    year: makeNodeComponent("year"),
    category: makeNodeComponent("category"),

    // Metadata about props expected for PlasmicInitiativesCard
    internalVariantProps: PlasmicInitiativesCard__VariantProps,
    internalArgProps: PlasmicInitiativesCard__ArgProps
  }
);

export default PlasmicInitiativesCard;
/* prettier-ignore-end */
